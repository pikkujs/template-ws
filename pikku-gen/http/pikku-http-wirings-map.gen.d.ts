/**
 * This file was generated by the @pikku/cli
 */
/**
 * This provides the structure needed for typescript to be aware of routes and their return types
 */
    


// Custom types are those that are defined directly within generics
// or are broken into simpler types
export type OnConnectInput = "hello!"
export type AuthenticateInput = { token: string; userId: string; }
export type AuthenticateOutput = { authResult: boolean; action: "auth"; }
export type SubscribeInput = { name: string; }
export type UnsubscribeInput = { name: string; }
export type EmitMessageInput = { name: string; }
export type EmitMessageOutput = { timestamp: string; from: string; } | { message: string; }
export type OnMessageInput = "hello"
export type OnMessageOutput = "hey"
export type ProgressiveEnhancementExampleOutput = { state: "initial" | "pending" | "done"; }
export type RpcTestInput = { in: number; }
export type RpcCallerInput = { name: string; data: unknown; }

// The '& {}' is a workaround for not directly refering to a type since it confuses typescript
export type RpcCallerInputBody = RpcCallerInput & {}

interface HTTPWiringHandler<I, O> {
    input: I;
    output: O;
}

export type HTTPWiringsMap = {
  readonly '/status/sse': {
    readonly GET: HTTPWiringHandler<null, ProgressiveEnhancementExampleOutput>,
  },
  readonly '/status/http': {
    readonly GET: HTTPWiringHandler<null, ProgressiveEnhancementExampleOutput>,
  },
  readonly '/': {
    readonly GET: HTTPWiringHandler<null, string>,
  },
  readonly '/hello-world': {
    readonly GET: HTTPWiringHandler<null, string>,
  },
  readonly '/rpc': {
    readonly POST: HTTPWiringHandler<RpcCallerInput, null>,
  },
};

export type HTTPWiringHandlerOf<HTTPWiring extends keyof HTTPWiringsMap, Method extends keyof HTTPWiringsMap[HTTPWiring]> =
    HTTPWiringsMap[HTTPWiring][Method] extends { input: infer I; output: infer O }
        ? HTTPWiringHandler<I, O>
        : never;

export type HTTPWiringsWithMethod<Method extends string> = {
  [HTTPWiring in keyof HTTPWiringsMap]: Method extends keyof HTTPWiringsMap[HTTPWiring] ? HTTPWiring : never;
}[keyof HTTPWiringsMap];
  