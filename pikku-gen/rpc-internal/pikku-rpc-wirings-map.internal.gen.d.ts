/**
 * This file was generated by the @pikku/cli
 */
/**
 * This provides the structure needed for typescript to be aware of RPCs and their return types
 */
    


// Custom types are those that are defined directly within generics
// or are broken into simpler types
export type OnConnectInput = "hello!"
export type AuthenticateInput = { token: string; userId: string; }
export type AuthenticateOutput = { authResult: boolean; action: "auth"; }
export type SubscribeInput = { name: string; }
export type UnsubscribeInput = { name: string; }
export type EmitMessageInput = { name: string; }
export type EmitMessageOutput = { timestamp: string; from: string; } | { message: string; }
export type OnMessageInput = "hello"
export type OnMessageOutput = "hey"
export type ProgressiveEnhancementExampleOutput = { state: "initial" | "pending" | "done"; }
export type RpcTestInput = { in: number; }
export type RpcCallerInput = { name: string; data: unknown; }

interface RPCHandler<I, O> {
    input: I;
    output: O;
}

export type RPCMap = {
  readonly 'onConnect': RPCHandler<OnConnectInput, null>,
  readonly 'onDisconnect': RPCHandler<null, null>,
  readonly 'authenticate': RPCHandler<AuthenticateInput, AuthenticateOutput>,
  readonly 'subscribe': RPCHandler<SubscribeInput, null>,
  readonly 'unsubscribe': RPCHandler<UnsubscribeInput, null>,
  readonly 'emitMessage': RPCHandler<EmitMessageInput, EmitMessageOutput>,
  readonly 'onMessage': RPCHandler<OnMessageInput, OnMessageOutput>,
  readonly 'progressiveEnhancementExample': RPCHandler<null, ProgressiveEnhancementExampleOutput>,
  readonly 'welcomeToPikku': RPCHandler<null, string>,
  readonly 'helloWorld': RPCHandler<null, string>,
  readonly 'rpcTest': RPCHandler<RpcTestInput, null>,
  readonly 'rpcCaller': RPCHandler<RpcCallerInput, null>,
  readonly 'myScheduledTask': RPCHandler<null, null>,
};


export type RPCInvoke = <Name extends keyof RPCMap>(
  name: Name,
  data: RPCMap[Name]['input'],
  options?: {
    location?: 'local' | 'remote' | 'auto'
  }
) => Promise<RPCMap[Name]['output']>

export type TypedPikkuRPC = {
  depth: number;
  global: boolean;
  invoke: RPCInvoke;
  invokeExposed: (name: string, data: any) => Promise<any> 
}
  